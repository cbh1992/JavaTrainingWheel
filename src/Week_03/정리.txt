메서드에 리턴타입(double, char, boolean등)을 선언하여 반환할 값이 있다면 반드시 return을 지정해야 한다
반환값이 없다면 void 메서드를 사용한다
void메서드에서도 return을 지정할 수 있다.  해당 구문으로 원하는 지점에서 메서드를 종료시킬수 있다

매개변수 : 메서드 호출시 메서드로 전달하려는 값(input)을 받기 위해 사용하는 변수
double gasPedal(double kmh, char type){} 에서 double 타입의 kmh, char 타입의 type이 해당
매개변수에 값을 전달하기 위해서는 순서와 타입에 맞춰 깁력하면 된다
매개변수는 생략 및 가변길이도 가능
가변길이 예시.  해당 예제의 ... 부분이 가변길이 선언문
void carSpeeds(double ... speeds){
    for(double v : speeds) {
            System.out.println("v = " + v);
        }
}

메서드 호출
의미 : 메서드 블록 내부의 코드 실행
외부접근 : Car car = new Car(); 으로 객체 생성하면 참조변수 car로 외부에서 객체내부 메서드 접근, 호출가능
내부접근 : 도트 연산자 사용, 객체 내무 메서드에서 접근, 호출 가능

오버로딩 - 하나의 메서드 이름으로 여러 기능을 구현하는 기능
조건 : 같은 메서드 이름, 매개변수의 개수 또는 타입 또는 순서가 달라야 함.  응답값만 다른것은 불가.  오버로딩은 매개변수의 차이로만 가능
장점 : 메서드 이름 하나로 상황에 따른 동작 개별정의

기본형 매개변수 : 메서드 호출시 전달할 매개값으로 지정한 값을 메서드의 매개변수에 복사, 전달
                매개변수가 기본형 타입일때는 값이 복사되어 넘어가 매개값으로 지정된 원본값은 변하지 않음
참조형 매개변수 : 메서드 호출시 매개값으로 지정한 값의 주소를 매개변수에 복사, 전달

멤버 = 필드 + 메서드
인스턴트 멤버 + 인스턴트(필드 + 메서드)
클래스 멤버 = 클래스(필드 + 메서드)
필드와 메서드는 선언방법에 따라 인스턴스, 클래스 구분
인스턴스는 객체 생성 후 사용가능, 클래스는 객체 생성없이 사용 가능

인스턴스 멤버
객체 생성해야 사용 가능
객체의 인스턴스 필드는 개별 인스턴스마다 고유값 가질수 있음
메서드는 메서드 영역에 두고 모든 인스턴스가 공유하여 사용
대신 인스턴스를 통해서만 메서드가 사용할 수 있게 제한

클래스 멤버
자바 클래스 로더에 의해 메서드 영역에 저장, 사용
클래스 멤버는 메서드 영역의 클래스와 같은 위치에 고정적으로 위치하는 멤버
클래스 멤버는 개체 생성없이 사용가능